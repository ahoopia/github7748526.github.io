{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Macrotask and Microtask","slug":"Macrotask-and-Microtask","date":"2022-05-10T07:25:17.000Z","updated":"2022-05-10T07:30:43.256Z","comments":true,"path":"2022/05/10/Macrotask-and-Microtask/","link":"","permalink":"http://example.com/2022/05/10/Macrotask-and-Microtask/","excerpt":"","text":"宏任务和微任务_chnyi6_ya的博客-CSDN博客_宏任务与微任务 宏任务和微任务JavaScript把异步任务又做了进一步的划分，异步任务又分为两类，分别是： 宏任务 异步Ajax请求 setTimeout 、setInterval 文件操作 其他宏任务 微任务 Promise.then、Promise.catch和Promise.finally process.nextTick 其他微任务","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-04T10:42:59.549Z","updated":"2022-05-09T15:57:44.197Z","comments":true,"path":"2022/05/04/hello-world/","link":"","permalink":"http://example.com/2022/05/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Windows PowerShell 实战指南（第三版）","slug":"Windows PowerShell 实战指南（第三版）","date":"2022-05-04T10:42:59.549Z","updated":"2022-05-04T10:06:40.799Z","comments":true,"path":"2022/05/04/Windows PowerShell 实战指南（第三版）/","link":"","permalink":"http://example.com/2022/05/04/Windows%20PowerShell%20%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%88%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%89/","excerpt":"","text":"第二章注意宽度设置，不要让下方出现滚动条。 第三章Get-command -verb command Get-command -noun command Get-command -type cmdlet command 参数名单独放在中括号中代表是位置参数；参数名和值同时放在中括号代表是可选参数； 使用文件来代替列表；(Get-Content filename) 带括号强制先执行，alias gc cp (gc .\\1.txt) .\\Pictures help -full 显示全部命令；help -example 显示例子；help -parameter 检索命令参数 习题 update-help help html 主要是检索能力 gcm -noun file printer gcm -noun process ; Get-process gcm -verb write -noun event ; Write-Eventlog gcm -noun alias ; get-alias help transcript help get-eventlog -parameter newest get-services -computername hostname get-process -computer hostname help out-file -full out-file -noclobber get-alias gps ; ps -c server1 gcm -noun object help about_arrays 第四章get-verb show-command 习题 get-process get-eventlog -logname application -newest 100 get-command -commandtype cmdlet get-alias set-alias new-txt c:\\windows\\notepad.exe get-service m* Get-NetFirewallRule Get-NetFirewallRule -Direction Inbound 第五章get-psprovider get-psdrive psprovider创建psdrive，比如文件系统Filesystem算是一种psprovider。操作psdrive的cmdlet都包括Item，比如dir(get-childitem)。 Item对应的是单独对象；ItemProperty对应的是对象属性；ChildItem 注册表以类似文件系统的结构呈现，其中注册表的键等同于文件系统中的文件夹，对应的键值类似于文件系统中的文件 cd:set-location进入的是psdrive new-item item -itemtype directory 替代Path的变量名 -LiteralPath（带转义作用，因为注册表中的名可以包含通配符*） 习题 Set-ItemProperty -Path .\\Advanced\\ -Name dontprettypath -value 0 new-item c:\\labs -itemtype directory new-item -Path C:\\labs\\ -Name Test.txt -ItemType File set-location env:temp 如果查询一个容器，Include与Exclude必须使用–Recurse参数。Filter使用了PS提供程序的过滤功能，并不是所有的提供程序都支持该参数。例如，你可以在文件系统中使用DIR –filter，但无法在注册表中使用——虽然你可以在注册表中使用DIR –include命令实现过滤输出结果。 第六章 管道export-csv filename notepad filename Diff -reference (Import-CliXML reference.xml) -difference (Get-Process) -property Name dir &gt; outfile.txt &#x3D;&#x3D;dir | out-file outfile.txt 当你运行“Dir”时，实际上是在运行“Dir | Out-Default”。“Out-Default”只是把内容指向“Out-Host”，意味着你在无意中运行了： Dir | Out-Default | Out-Host ps -Name msedge | Out-Printer -name “adobe pdf” 动词“Export”意味着你把数据提取出来，然后转换成其他格式，最后把转换后的格式以某种形式保存，如文件。而动词“ConvertTo”仅仅是处理过程的一部分，它仅转换不保存。当你执行前面的命令时，可以看到全屏的HTML数据，明显不是你想要的。那么请思考一下：你应该怎么把HTML存入磁盘的文本文件上？ 动手实验： 如果你想到其他方式，尽管尝试。下面的命令就是其中一种。 Get-Service | ConvertTo-HTML | Out-File services.html 下面我们希望你对类似“Stop-Service”和“Stop-Process”这些Cmdlets有更深入的了解。这些Cmdlets以某些方式修改系统，并且有一个内部定义的影响级别（impact level）。Cmdlet的创建者已经设定了这些影响级别，并且不允许修改。而Shell有一个相应的“$ConfirmPreference”设置，默认为“High”。可以通过下面的命令查看你的Shell的设置。 PS C:&gt; $ConfirmPreferenceHigh工作原理：当Cmdlet的内部影响级别大于等于Shell的“$ConfirmPreference”设置时，不管Cmdlet正准备做什么，Shell都会自动询问“你确定要这样做吗？（Are you sure?）”。实际上，如果你使用虚拟机尝试前面提到的那个“宕机”命令，你会发现对于每个进程，都会问一次“Are you sure?”。当Cmdlet的内部影响级别小于Shell的“$ConfirmPreference”设置时，不会自动弹出这个提示。 但是如果你“喜欢”它总是弹出，可以使用下面的 尽量不要使用get-content去读取csv中的文件内容。改cmdlet的解析效果不如import-csv等cmdlet命令。 习题 stop-service -name -delimiter “|” NoTypeInformation -noclobber -confirm -useculture 第七章 模块get-pssnapins 叫做powershell的管理单元，现在已经基本弃用。 习题没看懂实例ID的获取；get-module -listavilable列出modulepath路径下的所有可用包 第八章 对象 每当运行一个可以产生结果的命令时，输出结果在内存中以表的形式存放。当将输出结果以管道的方式由一个命令传送给另一个命令时，比如说： Get-Process | ConvertTo-HTML整个表通过管道进行传输。该表在传输过程中并不会过滤到只有一小部分列，而是直到所有的命令都运行后才会进行过滤 对象——这也就是所谓的“表行”。它代表单个事物，比如说单个进程或是单个服务。属性——这也就是所谓的“表列”。它代表关于对象的一部分信息，比如说进程名称、进程ID或服务状态。方法——这也就是所谓的“行为”。方法与某个对象关联并使得对象完成某些任务，比如说杀死进程或启动服务。集合——这是整个对象的集合，我们曾称之为“表”。 get-member gm可以查看对象的详细属性信息。 Get-Process -Name msedge | Sort-Object -Property cpu,vm -desc Get-Process -Name msedge | select-object -property processname Get-Process |Sort-Object VM -descending |Select-Object Name，ID，VM该命令以同样的方式运行。Get-Process将进程对象放入管道。接下来运行Sort-Object，该命令将同样的进程对象放入管道。但Select-Object就有所不同了。进程对象总是拥有相同的成员。Select-Object并不能通过删除你不需要的属性减少属性列表。如果这样的话，结果就不再是进程对象，而是Select-Object创建一个名为PSObject的自定义对象，PowerShell使用这个对象将属性从进程对象中复制出来，结果是自定义对象被放入管道。 当PowerShell发现光标已经到达命令行结尾时，它必须知道如何对文本输出结果进行排版。这是由于管道中包含的对象不再是进程对象，PowerShell不会再将默认规则和配置应用于进程对象，而是通过查询PSObject的规则和配置，这也是当前管道中包含的配置类型。由于PSObjects用于自定义输出，微软并没有为PSObjects提供任何规则或配置。而是PowerShell将尽最大努力进行猜测并产生表。在理论上，产生的表可以容纳上述3列信息，但表并不像正常的Get-Process输出结果那样有美观的排版，这是由于Shell缺少使得表更美观的额外的配置信息。 习题 get-random get-date system.datetime get-date | select dayofweek get-hotfix Get-HotFix | sort -Property Installedon |select installedon,hotfixid,installedby Get-HotFix | sort -Property description |select description,hotfixid,installedon | ConvertTo-Html | Out-File hotfix.html Get-EventLog -logname security -Newest 50 | sort -Property timegenerated,index | select index,timegenerated,source | Out-File log.txt 第九章 加强管道 PowerShell必须决定由Get-Service的哪个参数接收Get-Content的输出结果。这个决定的过程就称为管道参数绑定（Pipeline parameter binding）。 Get-Content .\\computers.txt | Get-Service 大部分情况下，使用相同名词的命令都可以使用ByValue方式相互之间进行管道传输（比如Get-Process和Stop-Process）。 ByValue是根据对象的typename，ByPropertyName是根据对象的属性类型：比如说Name属性。 import .csv | select-oject -property *, @{name&#x3D;’samaccountname’;e&#x3D;{$.login}},@{n&#x3D;’name’;e&#x3D;{$.login}}, @{n&#x3D;’department’;e&#x3D;{$_.dept}} | new-aduser 使用括号优先执行某些命令获得值。 get-process -name msedge -computername (Import-Csv *.csv |Select-Object -ExpandProperty hostname) 但是如果意识到一个属性是类似于盒子的概念，这将有助于我们掌握该技术。使用Select -Property确定该使用哪个盒子，但你还是拥有整个盒子。当使用Select -ExpandProperty时，你就可以打开对应盒子，提取里面的内容，最后扔掉整个盒子，仅保留需要的内容 NodeProperty都可以转换成String 习题 可以。computername 接受的type是字符串数组。 不可以。type不匹配 可以。 Get-ADComputer -Filter * | Select-Object @{l&#x3D;’ComputerName’;e&#x3D;{$_.Name}} | Get-HotFix Get-HotFix -ComputerName (Get-ADComputer -Filter * | Select-Object -Expand Name) 不可以 第十章 格式化自定义列表表头 Get-Process | Format-Table Name, @{name&#x3D;’VM(MB)’;expression&#x3D;{$_ VM &#x2F; 1MB –as [int] } } -autosize 以“Format-”开头的Cmdlet应该是命令行最后一个cmdlet。而Out-File与Out-Printer却是例外。其原因是以“Format-”开头的Cmdlets生成格式化指令，仅有“Out-”Cmdlet能合理地处理这些指令。如果一个以“Format-”开头的Cmdlet作为命令行的结尾，指令将使用“Out-Default”（作为管道的结尾）该cmdlet会指向“Out-Host”，这会导致非预期的格式化 习题第十一章 过滤和比较所有以Get-开始的Cmdlets都提供了-filter参数，Get-ADComputer -filter “Name -like ‘*DC’” eq ne ge le gt lt not！ like* ceq $_.Responding 包含返回结果 Get-Service | Where-Object -filter { $_.Status -eq ‘Running’ } $_.ID Get-Process | Where-Object -filter { $_.Name -notlike ‘powerShell*’ }|➥Sort VM -descending | Select -first 10 |➥Measure-Object -property VM -sum 习题第十二章 练习","categories":[],"tags":[{"name":"电子书","slug":"电子书","permalink":"http://example.com/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"name":"PS1","slug":"PS1","permalink":"http://example.com/tags/PS1/"}]}],"categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://example.com/tags/Javascript/"},{"name":"电子书","slug":"电子书","permalink":"http://example.com/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"name":"PS1","slug":"PS1","permalink":"http://example.com/tags/PS1/"}]}